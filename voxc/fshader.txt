#version 460

in vec2 UV;
in vec3 FragPos;
in vec4 FragPosLightSpace;

out vec4 outColor;

uniform sampler2D texs;
uniform sampler2D shadowMap;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}  

void main()
{
    vec3 color = texture( texs, UV ).rgb;
    //vec3 ambient = 0.15 * color;
    //vec3 ambient = vec3(0.8, 0.8, 0.8);
    float shadow = ShadowCalculation(FragPosLightSpace);   
    vec3 shadowVec = vec3(1.0f - shadow, 1.0f - shadow, 1.0f - shadow);
    ////vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;    
    //vec3 lighting = (ambient + (1.0 - shadow)) * color;
    //vec3 lighting = shadowVec * color;
    //outColor = vec4(lighting, 1.0f);
    ////if(outColor[3] < 0.5f) discard;
    outColor = vec4(shadowVec * color,1.0f);
    //outColor = vec4(shadow, shadow, shadow, 1.0f);
}
