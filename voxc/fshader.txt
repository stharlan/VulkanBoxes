#version 460

in vec2 UV;
in vec3 FragPos;
in vec4 FragPosLightSpace;
in vec3 normal;
in vec3 ltdir;

out vec4 outColor;

uniform sampler2D texs;
uniform sampler2D shadowMap;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    if(projCoords.x < 0.0f) return 1.0f;
    if(projCoords.y < 0.0f) return 1.0f;
    if(projCoords.x > 1.0f) return 1.0f;
    if(projCoords.y > 1.0f) return 1.0f;

    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow

    float bias = 0.0001f;
    //float bias = max(0.05f * (1.0f - dot(normal, ltdir)), 0.005f);  
    float shadow = (currentDepth - bias) > closestDepth  ? 0.5f : 1.0f;  

    return shadow;
}  

void main()
{
    vec3 lightColor = vec3(1.0f,1.0f,1.0f);
    float ambientStrength = 0.5f;

    vec3 diffuseLightPos = vec3(0.0f,0.0f,200.0f); // make uniform
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(diffuseLightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0f);
    vec3 diffuse = diff * lightColor;

    vec4 c4 = texture( texs, UV );
    if(c4.a < 0.5f) discard;
    vec3 color = c4.rgb;
    vec3 ambient = ambientStrength * lightColor;
    float shadow = ShadowCalculation(FragPosLightSpace);   
    outColor = vec4(((ambient + diffuse) * shadow) * color,1.0f);
}
